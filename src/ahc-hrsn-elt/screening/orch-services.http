# this file is for testing and verifying the orchestration HTTP service
# the end point receives data as files and text in POST method
# ------------------------------------------------------------------------
# * requires the `vscode-httpyac` Visual Studio Code extension
# * requires a `.env` file with HOST, PORT, INGRESS_FILE_PATH, EGRESS_FILE_PATH defined
# * the below Deno command will get the HTTP orch server up and running 
# * deno run -A ./src/ahc-hrsn-elt/screening/orch-http-service.ts --port 8088 --host 0.0.0.0 --shinny-fhir-url "https://40lafnwsw7.execute-api.us-east-1.amazonaws.com/dev/processingAgent=QE" --session-artifacts-home /HTTP
# * this service has 2 endpoints /orchestrate.zip(emits the response as a zip) & /orchestrate.json(emits the response as a json)

###

@contentType = multipart/form-data; boundary=form-boundary
@hostName = {{$dotenv HOST}}
@port = {{$dotenv PORT}}
@ingressFilePath = {{$dotenv INGRESS_FILE_PATH}}
@egressFilePath = {{$dotenv EGRESS_FILE_PATH}}

POST http://{{hostName}}:{{port}}/orchestrate.zip HTTP/1.1
Content-Type: {{contentType}}
{{
  const { equal } = require('assert');
  test('status code 200', () => {
    equal(response.statusCode, 200);
  });
  test('Check content-type', () => {
    equal(response.contentType.contentType, 'application/zip');
  });
  test.hasResponseBody();
}}

--form-boundary
Content-Disposition: form-data; name="qe"; 

healthelink
--form-boundary
Content-Disposition: form-data; name="submit-shin-ny"; 

yes
--form-boundary
Content-Disposition: form-data; name="persist-diagnostics"; 

no
--form-boundary
Content-Disposition: form-data; name="file"; filename="INGRESS_CSV.zip"
Content-Type: application/zip

< {{ingressFilePath}}INGRESS_CSV.zip
--form-boundary--

>>! {{egressFilePath}}egress-tx.zip


###

@contentType = multipart/form-data; boundary=form-boundary
@hostName = {{$dotenv HOST}}
@port = {{$dotenv PORT}}
@ingressFilePath = {{$dotenv INGRESS_FILE_PATH}}
@egressFilePath = {{$dotenv EGRESS_FILE_PATH}}
 
POST http://{{hostName}}:{{port}}/orchestrate.json HTTP/1.1
Content-Type: {{contentType}}
{{
  const { equal } = require('assert');
  test('status code 200', () => {
    equal(response.statusCode, 200);
  });
  test('Check content-type', () => {
    equal(response.contentType.contentType, 'application/json; charset=UTF-8');
  });
  test('check version', () => {
    equal(JSON.parse(response.body).version, '0.16.2');
  });
}}


--form-boundary
Content-Disposition: form-data; name="qe"; 

healthelink
--form-boundary
Content-Disposition: form-data; name="submit-shin-ny"; 

yes
--form-boundary
Content-Disposition: form-data; name="persist-diagnostics"; 

no
--form-boundary
Content-Disposition: form-data; name="file"; filename="INGRESS_CSV.zip"
Content-Type: application/zip

< {{ingressFilePath}}INGRESS_CSV.zip
--form-boundary--

>>! {{egressFilePath}}diagnostic-session.json


###

@contentType = multipart/form-data; boundary=form-boundary
@hostName = {{$dotenv HOST}}
@port = {{$dotenv PORT}}
@ingressFilePath = {{$dotenv INGRESS_FILE_PATH}}
@egressFilePath = {{$dotenv EGRESS_FILE_PATH}}

POST http://{{hostName}}:{{port}}/orchestrate.zip HTTP/1.1
Content-Type: {{contentType}}
{{
  const { equal } = require('assert');
  test('status code 200', () => {
    equal(response.statusCode, 200);
  });
  test('Check content-type', () => {
    equal(response.contentType.contentType, 'application/zip');
  });
  test.hasResponseBody();
}}


--form-boundary
Content-Disposition: form-data; name="qe"; 

healthelink
--form-boundary
Content-Disposition: form-data; name="submit-shin-ny"; 

yes
--form-boundary
Content-Disposition: form-data; name="persist-diagnostics"; 

no
--form-boundary
Content-Disposition: form-data; name="file"; filename="DEMOGRAPHIC_DATA_20240307.csv"
Content-Type: text/csv

< {{ingressFilePath}}DEMOGRAPHIC_DATA_20240307.csv
--form-boundary
Content-Disposition: form-data; name="file"; filename="QE_ADMIN_DATA_20240307.csv"
Content-Type: text/csv

< {{ingressFilePath}}QE_ADMIN_DATA_20240307.csv
--form-boundary
Content-Disposition: form-data; name="file"; filename="SCREENING_20240307.csv"
Content-Type: text/csv

< {{ingressFilePath}}SCREENING_20240307.csv
--form-boundary--

>>! {{egressFilePath}}egress-tx.zip


###

@contentType = multipart/form-data; boundary=form-boundary
@hostName = {{$dotenv HOST}}
@port = {{$dotenv PORT}}
@ingressFilePath = {{$dotenv INGRESS_FILE_PATH}}
@egressFilePath = {{$dotenv EGRESS_FILE_PATH}}

POST http://{{hostName}}:{{port}}/orchestrate.zip HTTP/1.1
Content-Type: {{contentType}}
{{
  const { equal } = require('assert');
  test('status code 200', () => {
    equal(response.statusCode, 200);
  });
  test.hasResponseBody();
  test('Check content-type', () => {
    equal(response.contentType.contentType, 'application/zip');
  });
}}


--form-boundary
Content-Disposition: form-data; name="qe"; 

healthelink
--form-boundary
Content-Disposition: form-data; name="submit-shin-ny"; 

yes
--form-boundary
Content-Disposition: form-data; name="file"; filename="DEMOGRAPHIC_DATA_20240307.csv"
Content-Type: text/csv

< {{ingressFilePath}}DEMOGRAPHIC_DATA_20240307.csv
--form-boundary
Content-Disposition: form-data; name="file"; filename="QE_ADMIN_DATA_20240307.csv"
Content-Type: text/csv

< {{ingressFilePath}}QE_ADMIN_DATA_20240307.csv
--form-boundary--

>>! {{egressFilePath}}egress-tx.zip
